{"version":3,"sources":["serviceWorker.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","searchBox","searchBoxChange","className","type","placeholder","onChange","card","id","name","email","src","alt","cardList","robotArray","robots","map","item","i","Card","key","scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasErrors","error","info","this","setState","console","log","Component","App","onRobotRequest","searchField","isPending","filteredRobots","filter","robot","toLowerCase","includes","SearchBox","onSearchChange","Scroll","CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","initialStateSearch","initialStateRobots","WebFont","load","google","families","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8b05e88.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst searchBox = ({searchBoxChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input \n                className=\"pa3 ba b--green bg-lightest-blue\" \n                type=\"search\" \n                placeholder=\"search robots\"\n                onChange={searchBoxChange}\n            />\n        </div>\n    )\n}\n\nexport default searchBox;","import React from 'react';\n\nconst card = ({id, name, email}) => {\n    return (\n        <div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-2'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default card;","import React from 'react';\nimport Card from './Card';\n\nconst cardList = ({robots}) => {\n    const robotArray = robots.map((item, i) => {\n        return <Card key={i} id={item.id} name={item.name} email={item.email} />;\n    });\n    \n    return(\n        <div>\n            {robotArray}\n        </div>\n    );\n}\n\nexport default cardList;","import React from 'react';\n\nconst scroll = (props) => {\n    return(\n        <div style={{overflow: 'scroll', border: '2px solid black', height: '700px'}}>\n            {props.children}\n        </div>\n    );\n\n}\n\nexport default scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasErrors: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasErrors: true});\n\t\tconsole.log('[ErrorBoundary]', 'error!');\n\t}\n\n\trender(){\n\t\treturn this.state.hasErrors ? <h1>Ups something went wrong</h1> : this.props.children;\n\t}\n\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nclass App extends Component {\n   \n    componentDidMount(){\n        this.props.onRobotRequest();\n    }\n    \n    render(){\n        const { searchField, robots, isPending, error } = this.props;\n\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n        return isPending ? <h1>Loading</h1> :\n            <div className=\"tc\">\n                <h1 className=\"title\">RoboFriends</h1>\n                <SearchBox searchBoxChange={this.props.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                </Scroll>\n            </div> \n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRobotRequest: () => dispatch(requestRobots())\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import * as actions from './constants';\n\nexport const setSearchField = (text) => (\n\t{\n\t\ttype: actions.SET_SEARCH_FIELD,\n\t\tpayload: text\n\t}\n);\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({type: actions.REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => dispatch({type: actions.REQUEST_ROBOTS_SUCCESS, payload: users}))\n        .catch(error => dispatch({type: actions.REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED  = 'REQUEST_ROBOTS_FAILED';","import * as actions from './constants';\n\n// initial state\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type){\n\t\tcase actions.SET_SEARCH_FIELD:\n\t\t\treturn {...state, searchField: action.payload};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type){\n\t\tcase actions.REQUEST_ROBOTS_PENDING:\n\t\t\treturn {...state, isPending: true}\n\t\tcase actions.REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn {...state, robots: action.payload, isPending:false}\n\t\tcase actions.REQUEST_ROBOTS_FAILED:\n\t\t\treturn {...state, error: action.payload, isPending: false}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\n\nimport App from './containers/App';\nimport './index.css';\nimport WebFont from 'webfontloader';\nimport { searchRobots, requestRobots } from './reducers'; \n\nWebFont.load({\n    google:{\n        families: ['Roboto:400,700', 'sans-serif']\n    }\n});\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots: searchRobots, \n\t\t\t\t\t\t\t\t\t requestRobots: requestRobots});\nconst store = createStore(rootReducer,applyMiddleware(logger, thunkMiddleware));\n\nReactDOM.render( <Provider store={store}> \n\t\t\t\t\t<App/> \n\t\t\t\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}